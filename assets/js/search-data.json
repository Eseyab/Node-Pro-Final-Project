{
  
    
        "post0": {
            "title": "Title",
            "content": "&#39;&#39;&#39; Features: -user.favourites_count -user.statuses_count -user.created_at -user.followers_count -user.friends_count -favorite_count -retweet_count -user.description (text analysis, entity tagging (if there are a lot of organizations could be a predictor)) -text (analysis of the tweet) -user.verified &#39;&#39;&#39; . &#39; nFeatures: n-user.favourites_count n-user.statuses_count n-user.created_at n-user.followers_count n-user.friends_count n-favorite_count n-retweet_count n n-user.description (text analysis, entity tagging (if there are a lot of organizations could be a predictor)) n-text (analysis of the tweet) n n-user.verified n&#39; . Identifying Verified Users in 2016 Election Day Tweets . The goal of this project is to evaluate different classification algorithms to identify verified Twitter users in a dataset of 400,000 tweets. . Imports . import pandas as pd import numpy as np import matplotlib.pyplot as plt from google.colab import drive from textblob import TextBlob !pip install readability import readability import string from datetime import datetime from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.ensemble import RandomForestClassifier from sklearn.neighbors import KNeighborsClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score from sklearn.metrics import precision_score from sklearn.metrics import recall_score from sklearn.preprocessing import StandardScaler . Collecting readability Downloading https://files.pythonhosted.org/packages/26/70/6f8750066255d4d2b82b813dd2550e0bd2bee99d026d14088a7b977cd0fc/readability-0.3.1.tar.gz Building wheels for collected packages: readability Building wheel for readability (setup.py) ... done Created wheel for readability: filename=readability-0.3.1-cp36-none-any.whl size=35463 sha256=f0de58bb4455958d26c5b8766758d812b7211e18274f9d5e0c08492bba3de8f2 Stored in directory: /root/.cache/pip/wheels/36/3f/65/bc327f4cdd5bff9ff510834e07522f94389e28858311b33b41 Successfully built readability Installing collected packages: readability Successfully installed readability-0.3.1 . Mount the Google Drive and read in the data . drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . df = pd.read_csv(&#39;/content/drive/My Drive/election_day_tweets.csv&#39;) . df.head() . text created_at geo lang place coordinates user.favourites_count user.statuses_count user.description user.location user.id user.created_at user.verified user.following user.url user.listed_count user.followers_count user.default_profile_image user.utc_offset user.friends_count user.default_profile user.name user.lang user.screen_name user.geo_enabled user.profile_background_color user.profile_image_url user.time_zone id favorite_count retweeted source favorited retweet_count . 0 .@Lawrence @HillaryClinton Two first @SenSchu... | 2016-11-08 04:04:37 | NaN | en | NaN | NaN | 18882 | 26939 | The Specialist, Copyrighted TX0008044160 #Surv... | WorldWide 80Million StealthRUs | 22729901 | 2009-03-04 03:55:45 | False | False | https://t.co/rKXNF1G270 | 374 | 86551 | False | -28800.0 | 2674 | False | Phillip Sheppard | en | PSheppardTV | True | 131516 | http://pbs.twimg.com/profile_images/7878871945... | America/Los_Angeles | 795839414735732737 | 11 | False | Twitter for Android | False | 8 | . 1 My @latimesopinion op-ed on historic #Californ... | 2016-11-08 04:08:10 | NaN | en | NaN | NaN | 8 | 4841 | Hoover Institution research fellow; https://t.... | Palo Alto, California | 794779346 | 2012-08-31 22:13:27 | False | False | https://t.co/K2fl294qFp | 91 | 1689 | False | -28800.0 | 344 | False | Bill Whalen | en | hooverwhalen | True | C0DEED | http://pbs.twimg.com/profile_images/6514470051... | Pacific Time (US &amp; Canada) | 795840310597193728 | 3 | False | Twitter Web Client | False | 4 | . 2 #Senate Wisconsin Senate Preview: Johnson vs. ... | 2016-11-08 04:11:35 | NaN | en | NaN | NaN | 728 | 160390 | US SENATE NEWS FEED. The U.S. Senate is the w... | USA | 190890578 | 2010-09-15 02:41:11 | False | False | NaN | 798 | 14726 | False | -32400.0 | 13974 | False | Quorum Call | en | QuorumCall | False | 473969 | http://pbs.twimg.com/profile_images/6155877017... | Alaska | 795841168621719552 | 0 | False | dlvr.it | False | 0 | . 3 If Rubio Wins and #Trump Loses in #Florida... ... | 2016-11-08 04:12:16 | NaN | en | NaN | NaN | 0 | 18105 | The most trending Marco Rubio news as collecte... | Washington DC | 3175968009 | 2015-04-17 09:59:55 | False | False | http://t.co/TbC8SzlTVN | 57 | 121 | False | NaN | 96 | True | Marco Rubio Trends | nl | Rubiolizer | False | C0DEED | http://pbs.twimg.com/profile_images/5890065307... | NaN | 795841341146234880 | 0 | False | Lead Stories Feed Publisher | False | 0 | . 4 #Senate Wisconsin Senate Preview: Johnson vs. ... | 2016-11-08 04:16:20 | NaN | en | NaN | NaN | 4722 | 247322 | News &amp; #ALERTS. We are a large group of proud ... | 24hr Live HD Stream Broadcast | 2836839353 | 2014-10-19 04:50:02 | False | False | https://t.co/ceRinWzb9I | 288 | 17479 | False | -18000.0 | 2291 | False | NTA✪NEWS ROOM™ | en | NoThiefs | False | 1B95E0 | http://pbs.twimg.com/profile_images/7971276617... | Eastern Time (US &amp; Canada) | 795842365881782272 | 0 | False | IFTTT | False | 0 | . Explore the dataset . df.columns . Index([&#39;text&#39;, &#39;created_at&#39;, &#39;geo&#39;, &#39;lang&#39;, &#39;place&#39;, &#39;coordinates&#39;, &#39;user.favourites_count&#39;, &#39;user.statuses_count&#39;, &#39;user.description&#39;, &#39;user.location&#39;, &#39;user.id&#39;, &#39;user.created_at&#39;, &#39;user.verified&#39;, &#39;user.following&#39;, &#39;user.url&#39;, &#39;user.listed_count&#39;, &#39;user.followers_count&#39;, &#39;user.default_profile_image&#39;, &#39;user.utc_offset&#39;, &#39;user.friends_count&#39;, &#39;user.default_profile&#39;, &#39;user.name&#39;, &#39;user.lang&#39;, &#39;user.screen_name&#39;, &#39;user.geo_enabled&#39;, &#39;user.profile_background_color&#39;, &#39;user.profile_image_url&#39;, &#39;user.time_zone&#39;, &#39;id&#39;, &#39;favorite_count&#39;, &#39;retweeted&#39;, &#39;source&#39;, &#39;favorited&#39;, &#39;retweet_count&#39;], dtype=&#39;object&#39;) . counts = df[&#39;user.id&#39;].value_counts()[:100] plt.scatter(np.arange(counts.size), counts) . &lt;matplotlib.collections.PathCollection at 0x7f27d1d83940&gt; . mentions_trump = df[&#39;text&#39;].apply(lambda x: &#39;donald&#39; in x.lower() or &#39;trump&#39; in x.lower()) mentions_hillary = df[&#39;text&#39;].apply(lambda x: &#39;hillary&#39; in x.lower() or &#39;clinton&#39; in x.lower()) . num_trump_tweets = mentions_trump.sum() num_clinton_tweets = mentions_hillary.sum() num_both = (mentions_trump &amp; mentions_hillary).sum() . print(&quot;Total tweets:&quot;, df[&#39;text&#39;].size) print(&quot;Num tweets mentioning Trump:&quot;, num_trump_tweets) print(&quot;Num tweets mentioning Clinton:&quot;, num_clinton_tweets) print(&quot;Num tweets mentioning both:&quot;, num_both) . Total tweets: 397629 Num tweets mentioning Trump: 64843 Num tweets mentioning Clinton: 42682 Num tweets mentioning both: 17513 . sizes = [num_trump_tweets - num_both, num_clinton_tweets - num_both, num_both, df[&#39;text&#39;].size + num_both - (num_trump_tweets + num_clinton_tweets)] labels = [&quot;Trump&quot;, &quot;Clintion&quot;, &quot;Both&quot;, &quot;Other&quot;] def make_autopct(values): def my_autopct(pct): total = sum(values) val = int(round(pct*total/100.0)) return &#39;{p:.2f}%&#39;.format(p=pct) return my_autopct plt.pie(sizes, labels=labels, autopct=make_autopct(sizes)) plt.title(&quot;Tweets On Election Day 2016&quot;) plt.show() . num_hashtags = df[&#39;text&#39;].apply(lambda x: x.count(&#39;#&#39;)) print(&quot;Average &#39;#&#39; per tweet:&quot;, num_hashtags.sum() / num_hashtags.size) # average @ signs per tweet num_tags = df[&#39;text&#39;].apply(lambda x: x.count(&#39;@&#39;)) print(&quot;Average number of &#39;@&#39; per tweet:&quot;, num_tags.sum()/ num_tags.size) . Average &#39;#&#39; per tweet: 1.3594229797122444 Average number of &#39;@&#39; per tweet: 0.35360348465529423 . num_verified_tweets = df[&#39;user.verified&#39;].sum() print(&quot;There are&quot;, num_verified_tweets, &quot;tweets from verified users in the dataset, which is&quot;, &quot;{:.2%}&quot;.format(num_verified_tweets/df[&#39;user.verified&#39;].size), &quot;of the dataset.&quot;) num_verified_users = df[&#39;user.id&#39;][df[&#39;user.verified&#39;]].value_counts().size print(&quot;These tweets come from&quot;, num_verified_users, &quot;different accounts.&quot;) df[&#39;user.id&#39;][df[&#39;user.verified&#39;]].value_counts() . There are 14593 tweets from verified users in the dataset, which is 3.67% of the dataset. These tweets come from 7845 different accounts. . 158070493 62 2312829909 57 39366506 56 3683007026 48 2982269822 42 .. 16205428 1 2924521080 1 108523129 1 233638131 1 186875904 1 Name: user.id, Length: 7845, dtype: int64 . Create new features from the dataset . df[&#39;no_punc&#39;] = df[&#39;text&#39;].apply(lambda x: x.translate(str.maketrans(&#39;&#39;, &#39;&#39;, string.punctuation))) df[&#39;readability&#39;] = df[&#39;no_punc&#39;].apply(lambda x: readability.getmeasures(x, lang=&#39;en&#39;)[&#39;readability grades&#39;][&#39;FleschReadingEase&#39;]) # Create polarity and subjectivity columns df[&#39;sentiment&#39;] = df[&#39;text&#39;].apply(lambda x: TextBlob(x).sentiment) df[&#39;polarity&#39;] = df[&#39;sentiment&#39;].apply(lambda x: x[0]) df[&#39;subjectivity&#39;] = df[&#39;sentiment&#39;].apply(lambda x: x[1]) . Create the training and testing data . X = df[[&#39;user.favourites_count&#39;, &#39;user.statuses_count&#39;, &#39;user.followers_count&#39;, &#39;user.friends_count&#39;, &#39;favorite_count&#39;, &#39;retweet_count&#39;, &#39;readability&#39;, &#39;polarity&#39;, &#39;subjectivity&#39;]] y = df[&#39;user.verified&#39;] . X[&#39;years_active&#39;] = 2020 - pd.to_datetime(df[&#39;user.created_at&#39;]).dt.year . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy &#34;&#34;&#34;Entry point for launching an IPython kernel. . X.columns . Index([&#39;user.favourites_count&#39;, &#39;user.statuses_count&#39;, &#39;user.followers_count&#39;, &#39;user.friends_count&#39;, &#39;favorite_count&#39;, &#39;retweet_count&#39;, &#39;readability&#39;, &#39;polarity&#39;, &#39;subjectivity&#39;, &#39;years_active&#39;], dtype=&#39;object&#39;) . X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, stratify=y) sc = StandardScaler() X_train_scaled = sc.fit_transform(X_train) X_test_scaled = sc.transform(X_test) . Testing different models . tree_clf = DecisionTreeClassifier(max_depth=3).fit(X_train, y_train) tree_pred = tree_clf.predict(X_test) print(&quot;Decision Tree Classifier&quot;) print(&quot;Precision:&quot;, precision_score(y_test, tree_pred)) print(&quot;Recall:&quot;, recall_score(y_test, tree_pred)) . Decision Tree Classifier Precision: 0.8784722222222222 Recall: 0.2080592105263158 . pd.DataFrame(np.vstack((X_train.columns, tree_clf.feature_importances_))) . 0 1 2 3 4 5 6 7 8 9 . 0 user.favourites_count | user.statuses_count | user.followers_count | user.friends_count | favorite_count | retweet_count | readability | polarity | subjectivity | years_active | . 1 0 | 0 | 0.859929 | 0.140071 | 0 | 0 | 0 | 0 | 0 | 0 | . random_clf = RandomForestClassifier().fit(X_train, y_train) random_pred = random_clf.predict(X_test) print(&quot;Random Forest Classifier&quot;) print(&quot;Precision:&quot;, precision_score(y_test, random_pred)) print(&quot;Recall:&quot;, recall_score(y_test, random_pred)) . Random Forest Classifier Precision: 0.8441045880611742 Recall: 0.46902412280701755 . pd.DataFrame(np.vstack((X_train.columns, random_clf.feature_importances_))) . 0 1 2 3 4 5 6 7 8 9 . 0 user.favourites_count | user.statuses_count | user.followers_count | user.friends_count | favorite_count | retweet_count | readability | polarity | subjectivity | years_active | . 1 0.102196 | 0.119527 | 0.327294 | 0.137366 | 0.0575709 | 0.0576723 | 0.0710261 | 0.0364576 | 0.0336894 | 0.0572014 | . neigh_clf = KNeighborsClassifier(n_neighbors=5).fit(X_train_scaled, y_train) neigh_pred = neigh_clf.predict(X_test_scaled) print(&quot;K-Neighbors Classifier&quot;) print(&quot;Precision&quot;, precision_score(y_test, neigh_pred)) print(&quot;Recall:&quot;, recall_score(y_test, neigh_pred)) . K-Neighbors Classifier Precision 0.7712305025996534 Recall: 0.24396929824561403 . log_clf = LogisticRegression(max_iter=1000).fit(X_train_scaled, y_train) log_pred = log_clf.predict(X_test_scaled) print(&quot;Logistic Regression Classifier&quot;) print(&quot;Precision&quot;, precision_score(y_test, log_pred)) print(&quot;Recall:&quot;, recall_score(y_test, log_pred)) . Logistic Regression Classifier Precision 0.8552361396303901 Recall: 0.22834429824561403 . More investigation . years_active = 2020 - pd.to_datetime(df[&#39;user.created_at&#39;]).dt.year plt.hist(years_active[df[&#39;user.verified&#39;] == True], 10) plt.title(&quot;Ages of Verified Accounts&quot;) plt.show() . plt.hist(years_active, 10) plt.title(&quot;Ages of all accounts&quot;) plt.show() .",
            "url": "https://eseyab.github.io/Node-Pro-Final-Project/2020/11/15/Election-Day-Tweets.html",
            "relUrl": "/2020/11/15/Election-Day-Tweets.html",
            "date": " • Nov 15, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://eseyab.github.io/Node-Pro-Final-Project/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://eseyab.github.io/Node-Pro-Final-Project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://eseyab.github.io/Node-Pro-Final-Project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://eseyab.github.io/Node-Pro-Final-Project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}